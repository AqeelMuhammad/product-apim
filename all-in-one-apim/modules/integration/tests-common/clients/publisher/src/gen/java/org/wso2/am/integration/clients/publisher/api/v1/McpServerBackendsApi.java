/*
 * WSO2 API Manager - Publisher API
 * This document specifies a **RESTful API** for WSO2 **API Manager** - **Publisher**.  # Authentication The Publisher REST API is protected using OAuth2 and access control is achieved through scopes. Before you start invoking the the API you need to obtain an access token with the required scopes. This guide will walk you through the steps that you will need to follow to obtain an access token. First you need to obtain the consumer key/secret key pair by calling the dynamic client registration (DCR) endpoint. You can add your preferred grant types in the payload. A Sample payload is shown below. ```   {   \"callbackUrl\":\"www.google.lk\",   \"clientName\":\"rest_api_publisher\",   \"owner\":\"admin\",   \"grantType\":\"client_credentials password refresh_token\",   \"saasApp\":true   } ``` Create a file (payload.json) with the above sample payload, and use the cURL shown bellow to invoke the DCR endpoint. Authorization header of this should contain the base64 encoded admin username and password. **Format of the request** ```   curl -X POST -H \"Authorization: Basic Base64(admin_username:admin_password)\" -H \"Content-Type: application/json\"   \\ -d @payload.json https://<host>:<servlet_port>/client-registration/v0.17/register ``` **Sample request** ```   curl -X POST -H \"Authorization: Basic YWRtaW46YWRtaW4=\" -H \"Content-Type: application/json\"   \\ -d @payload.json https://localhost:9443/client-registration/v0.17/register ``` Following is a sample response after invoking the above curl. ``` { \"clientId\": \"fOCi4vNJ59PpHucC2CAYfYuADdMa\", \"clientName\": \"rest_api_publisher\", \"callBackURL\": \"www.google.lk\", \"clientSecret\": \"a4FwHlq0iCIKVs2MPIIDnepZnYMa\", \"isSaasApplication\": true, \"appOwner\": \"admin\", \"jsonString\": \"{\\\"grant_types\\\":\\\"client_credentials password refresh_token\\\",\\\"redirect_uris\\\":\\\"www.google.lk\\\",\\\"client_name\\\":\\\"rest_api123\\\"}\", \"jsonAppAttribute\": \"{}\", \"tokenType\": null } ``` Next you must use the above client id and secret to obtain the access token. We will be using the password grant type for this, you can use any grant type you desire. You also need to add the proper **scope** when getting the access token. All possible scopes for publisher REST API can be viewed in **OAuth2 Security** section of this document and scope for each resource is given in **authorization** section of resource documentation. Following is the format of the request if you are using the password grant type. ``` curl -k -d \"grant_type=password&username=<admin_username>&password=<admin_passowrd&scope=<scopes seperated by space>\" \\ -H \"Authorization: Basic base64(cliet_id:client_secret)\" \\ https://<host>:<servlet_port>/oauth2/token ``` **Sample request** ``` curl https://localhost:9443/oauth2/token -k \\ -H \"Authorization: Basic Zk9DaTR2Tko1OVBwSHVjQzJDQVlmWXVBRGRNYTphNEZ3SGxxMGlDSUtWczJNUElJRG5lcFpuWU1h\" \\ -d \"grant_type=password&username=admin&password=admin&scope=apim:api_view apim:api_create\" ``` Shown below is a sample response to the above request. ``` { \"access_token\": \"e79bda48-3406-3178-acce-f6e4dbdcbb12\", \"refresh_token\": \"a757795d-e69f-38b8-bd85-9aded677a97c\", \"scope\": \"apim:api_create apim:api_view\", \"token_type\": \"Bearer\", \"expires_in\": 3600 } ``` Now you have a valid access token, which you can use to invoke an API. Navigate through the API descriptions to find the required API, obtain an access token as described above and invoke the API with the authentication header. If you use a different authentication mechanism, this process may change.  # Try out in Postman If you want to try-out the embedded postman collection with \"Run in Postman\" option, please follow the guidelines listed below. * All of the OAuth2 secured endpoints have been configured with an Authorization Bearer header with a parameterized access token. Before invoking any REST API resource make sure you run the `Register DCR Application` and `Generate Access Token` requests to fetch an access token with all required scopes. * Make sure you have an API Manager instance up and running. * Update the `basepath` parameter to match the hostname and port of the APIM instance.  [![Run in Postman](https://run.pstmn.io/button.svg)](https://app.getpostman.com/run-collection/a09044034b5c3c1b01a9) 
 *
 * The version of the OpenAPI document: v4
 * Contact: architecture@wso2.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.wso2.am.integration.clients.publisher.api.v1;

import org.wso2.am.integration.clients.publisher.api.ApiCallback;
import org.wso2.am.integration.clients.publisher.api.ApiClient;
import org.wso2.am.integration.clients.publisher.api.ApiException;
import org.wso2.am.integration.clients.publisher.api.ApiResponse;
import org.wso2.am.integration.clients.publisher.api.Configuration;
import org.wso2.am.integration.clients.publisher.api.Pair;
import org.wso2.am.integration.clients.publisher.api.ProgressRequestBody;
import org.wso2.am.integration.clients.publisher.api.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.wso2.am.integration.clients.publisher.api.v1.dto.BackendDTO;
import org.wso2.am.integration.clients.publisher.api.v1.dto.BackendListDTO;
import org.wso2.am.integration.clients.publisher.api.v1.dto.ErrorDTO;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class McpServerBackendsApi {
    private ApiClient localVarApiClient;

    public McpServerBackendsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public McpServerBackendsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for getMCPServerBackend
     * @param mcpServerId **MCP Server ID** consisting of the **UUID** of the MCP Server.  (required)
     * @param backendId **Backend ID** consisting of the **UUID** of the Backend**.  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Backend object is returned.  </td><td>  * Content-Type - The content type of the body.  <br>  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The specified resource does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMCPServerBackendCall(String mcpServerId, String backendId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/mcp-servers/{mcpServerId}/backends/{backendId}"
            .replaceAll("\\{" + "mcpServerId" + "\\}", localVarApiClient.escapeString(mcpServerId.toString()))
            .replaceAll("\\{" + "backendId" + "\\}", localVarApiClient.escapeString(backendId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMCPServerBackendValidateBeforeCall(String mcpServerId, String backendId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'mcpServerId' is set
        if (mcpServerId == null) {
            throw new ApiException("Missing the required parameter 'mcpServerId' when calling getMCPServerBackend(Async)");
        }
        
        // verify the required parameter 'backendId' is set
        if (backendId == null) {
            throw new ApiException("Missing the required parameter 'backendId' when calling getMCPServerBackend(Async)");
        }
        

        okhttp3.Call localVarCall = getMCPServerBackendCall(mcpServerId, backendId, _callback);
        return localVarCall;

    }

    /**
     * Get backends of a MCP Server
     * This operation can be used to get a backend of a MCP Server 
     * @param mcpServerId **MCP Server ID** consisting of the **UUID** of the MCP Server.  (required)
     * @param backendId **Backend ID** consisting of the **UUID** of the Backend**.  (required)
     * @return BackendDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Backend object is returned.  </td><td>  * Content-Type - The content type of the body.  <br>  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The specified resource does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public BackendDTO getMCPServerBackend(String mcpServerId, String backendId) throws ApiException {
        ApiResponse<BackendDTO> localVarResp = getMCPServerBackendWithHttpInfo(mcpServerId, backendId);
        return localVarResp.getData();
    }

    /**
     * Get backends of a MCP Server
     * This operation can be used to get a backend of a MCP Server 
     * @param mcpServerId **MCP Server ID** consisting of the **UUID** of the MCP Server.  (required)
     * @param backendId **Backend ID** consisting of the **UUID** of the Backend**.  (required)
     * @return ApiResponse&lt;BackendDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Backend object is returned.  </td><td>  * Content-Type - The content type of the body.  <br>  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The specified resource does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BackendDTO> getMCPServerBackendWithHttpInfo(String mcpServerId, String backendId) throws ApiException {
        okhttp3.Call localVarCall = getMCPServerBackendValidateBeforeCall(mcpServerId, backendId, null);
        Type localVarReturnType = new TypeToken<BackendDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get backends of a MCP Server (asynchronously)
     * This operation can be used to get a backend of a MCP Server 
     * @param mcpServerId **MCP Server ID** consisting of the **UUID** of the MCP Server.  (required)
     * @param backendId **Backend ID** consisting of the **UUID** of the Backend**.  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Backend object is returned.  </td><td>  * Content-Type - The content type of the body.  <br>  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The specified resource does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMCPServerBackendAsync(String mcpServerId, String backendId, final ApiCallback<BackendDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMCPServerBackendValidateBeforeCall(mcpServerId, backendId, _callback);
        Type localVarReturnType = new TypeToken<BackendDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMCPServerBackends
     * @param mcpServerId **MCP Server ID** consisting of the **UUID** of the MCP Server.  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. A list of Backend objects are returned.  </td><td>  * Content-Type - The content type of the body.  <br>  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The specified resource does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMCPServerBackendsCall(String mcpServerId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/mcp-servers/{mcpServerId}/backends"
            .replaceAll("\\{" + "mcpServerId" + "\\}", localVarApiClient.escapeString(mcpServerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMCPServerBackendsValidateBeforeCall(String mcpServerId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'mcpServerId' is set
        if (mcpServerId == null) {
            throw new ApiException("Missing the required parameter 'mcpServerId' when calling getMCPServerBackends(Async)");
        }
        

        okhttp3.Call localVarCall = getMCPServerBackendsCall(mcpServerId, _callback);
        return localVarCall;

    }

    /**
     * Get a list of backends of a MCP Server
     * This operation can be used to get a list of backends of a MCP server by the MCP Server UUID. 
     * @param mcpServerId **MCP Server ID** consisting of the **UUID** of the MCP Server.  (required)
     * @return BackendListDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. A list of Backend objects are returned.  </td><td>  * Content-Type - The content type of the body.  <br>  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The specified resource does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public BackendListDTO getMCPServerBackends(String mcpServerId) throws ApiException {
        ApiResponse<BackendListDTO> localVarResp = getMCPServerBackendsWithHttpInfo(mcpServerId);
        return localVarResp.getData();
    }

    /**
     * Get a list of backends of a MCP Server
     * This operation can be used to get a list of backends of a MCP server by the MCP Server UUID. 
     * @param mcpServerId **MCP Server ID** consisting of the **UUID** of the MCP Server.  (required)
     * @return ApiResponse&lt;BackendListDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. A list of Backend objects are returned.  </td><td>  * Content-Type - The content type of the body.  <br>  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The specified resource does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BackendListDTO> getMCPServerBackendsWithHttpInfo(String mcpServerId) throws ApiException {
        okhttp3.Call localVarCall = getMCPServerBackendsValidateBeforeCall(mcpServerId, null);
        Type localVarReturnType = new TypeToken<BackendListDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a list of backends of a MCP Server (asynchronously)
     * This operation can be used to get a list of backends of a MCP server by the MCP Server UUID. 
     * @param mcpServerId **MCP Server ID** consisting of the **UUID** of the MCP Server.  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. A list of Backend objects are returned.  </td><td>  * Content-Type - The content type of the body.  <br>  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The specified resource does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMCPServerBackendsAsync(String mcpServerId, final ApiCallback<BackendListDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMCPServerBackendsValidateBeforeCall(mcpServerId, _callback);
        Type localVarReturnType = new TypeToken<BackendListDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateMCPServerBackend
     * @param mcpServerId **MCP Server ID** consisting of the **UUID** of the MCP Server.  (required)
     * @param backendId **Backend ID** consisting of the **UUID** of the Backend**.  (required)
     * @param backendDTO Backend object with updated details (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Updated Backend is returned.  </td><td>  * Content-Type - The content type of the body.  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request. Invalid request or validation error. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The specified resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type. The entity of the request was not in a supported format. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateMCPServerBackendCall(String mcpServerId, String backendId, BackendDTO backendDTO, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = backendDTO;

        // create path and map variables
        String localVarPath = "/mcp-servers/{mcpServerId}/backends/{backendId}"
            .replaceAll("\\{" + "mcpServerId" + "\\}", localVarApiClient.escapeString(mcpServerId.toString()))
            .replaceAll("\\{" + "backendId" + "\\}", localVarApiClient.escapeString(backendId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateMCPServerBackendValidateBeforeCall(String mcpServerId, String backendId, BackendDTO backendDTO, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'mcpServerId' is set
        if (mcpServerId == null) {
            throw new ApiException("Missing the required parameter 'mcpServerId' when calling updateMCPServerBackend(Async)");
        }
        
        // verify the required parameter 'backendId' is set
        if (backendId == null) {
            throw new ApiException("Missing the required parameter 'backendId' when calling updateMCPServerBackend(Async)");
        }
        

        okhttp3.Call localVarCall = updateMCPServerBackendCall(mcpServerId, backendId, backendDTO, _callback);
        return localVarCall;

    }

    /**
     * Update a backend of a MCP Server
     * This operation can be used to update a backend of a MCP Server 
     * @param mcpServerId **MCP Server ID** consisting of the **UUID** of the MCP Server.  (required)
     * @param backendId **Backend ID** consisting of the **UUID** of the Backend**.  (required)
     * @param backendDTO Backend object with updated details (optional)
     * @return BackendDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Updated Backend is returned.  </td><td>  * Content-Type - The content type of the body.  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request. Invalid request or validation error. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The specified resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type. The entity of the request was not in a supported format. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public BackendDTO updateMCPServerBackend(String mcpServerId, String backendId, BackendDTO backendDTO) throws ApiException {
        ApiResponse<BackendDTO> localVarResp = updateMCPServerBackendWithHttpInfo(mcpServerId, backendId, backendDTO);
        return localVarResp.getData();
    }

    /**
     * Update a backend of a MCP Server
     * This operation can be used to update a backend of a MCP Server 
     * @param mcpServerId **MCP Server ID** consisting of the **UUID** of the MCP Server.  (required)
     * @param backendId **Backend ID** consisting of the **UUID** of the Backend**.  (required)
     * @param backendDTO Backend object with updated details (optional)
     * @return ApiResponse&lt;BackendDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Updated Backend is returned.  </td><td>  * Content-Type - The content type of the body.  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request. Invalid request or validation error. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The specified resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type. The entity of the request was not in a supported format. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BackendDTO> updateMCPServerBackendWithHttpInfo(String mcpServerId, String backendId, BackendDTO backendDTO) throws ApiException {
        okhttp3.Call localVarCall = updateMCPServerBackendValidateBeforeCall(mcpServerId, backendId, backendDTO, null);
        Type localVarReturnType = new TypeToken<BackendDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a backend of a MCP Server (asynchronously)
     * This operation can be used to update a backend of a MCP Server 
     * @param mcpServerId **MCP Server ID** consisting of the **UUID** of the MCP Server.  (required)
     * @param backendId **Backend ID** consisting of the **UUID** of the Backend**.  (required)
     * @param backendDTO Backend object with updated details (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Updated Backend is returned.  </td><td>  * Content-Type - The content type of the body.  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request. Invalid request or validation error. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The specified resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type. The entity of the request was not in a supported format. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateMCPServerBackendAsync(String mcpServerId, String backendId, BackendDTO backendDTO, final ApiCallback<BackendDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateMCPServerBackendValidateBeforeCall(mcpServerId, backendId, backendDTO, _callback);
        Type localVarReturnType = new TypeToken<BackendDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
