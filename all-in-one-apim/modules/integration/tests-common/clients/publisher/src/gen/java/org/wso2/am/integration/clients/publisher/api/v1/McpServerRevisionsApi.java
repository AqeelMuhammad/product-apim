/*
 * WSO2 API Manager - Publisher API
 * This document specifies a **RESTful API** for WSO2 **API Manager** - **Publisher**.  # Authentication The Publisher REST API is protected using OAuth2 and access control is achieved through scopes. Before you start invoking the the API you need to obtain an access token with the required scopes. This guide will walk you through the steps that you will need to follow to obtain an access token. First you need to obtain the consumer key/secret key pair by calling the dynamic client registration (DCR) endpoint. You can add your preferred grant types in the payload. A Sample payload is shown below. ```   {   \"callbackUrl\":\"www.google.lk\",   \"clientName\":\"rest_api_publisher\",   \"owner\":\"admin\",   \"grantType\":\"client_credentials password refresh_token\",   \"saasApp\":true   } ``` Create a file (payload.json) with the above sample payload, and use the cURL shown bellow to invoke the DCR endpoint. Authorization header of this should contain the base64 encoded admin username and password. **Format of the request** ```   curl -X POST -H \"Authorization: Basic Base64(admin_username:admin_password)\" -H \"Content-Type: application/json\"   \\ -d @payload.json https://<host>:<servlet_port>/client-registration/v0.17/register ``` **Sample request** ```   curl -X POST -H \"Authorization: Basic YWRtaW46YWRtaW4=\" -H \"Content-Type: application/json\"   \\ -d @payload.json https://localhost:9443/client-registration/v0.17/register ``` Following is a sample response after invoking the above curl. ``` { \"clientId\": \"fOCi4vNJ59PpHucC2CAYfYuADdMa\", \"clientName\": \"rest_api_publisher\", \"callBackURL\": \"www.google.lk\", \"clientSecret\": \"a4FwHlq0iCIKVs2MPIIDnepZnYMa\", \"isSaasApplication\": true, \"appOwner\": \"admin\", \"jsonString\": \"{\\\"grant_types\\\":\\\"client_credentials password refresh_token\\\",\\\"redirect_uris\\\":\\\"www.google.lk\\\",\\\"client_name\\\":\\\"rest_api123\\\"}\", \"jsonAppAttribute\": \"{}\", \"tokenType\": null } ``` Next you must use the above client id and secret to obtain the access token. We will be using the password grant type for this, you can use any grant type you desire. You also need to add the proper **scope** when getting the access token. All possible scopes for publisher REST API can be viewed in **OAuth2 Security** section of this document and scope for each resource is given in **authorization** section of resource documentation. Following is the format of the request if you are using the password grant type. ``` curl -k -d \"grant_type=password&username=<admin_username>&password=<admin_passowrd&scope=<scopes seperated by space>\" \\ -H \"Authorization: Basic base64(cliet_id:client_secret)\" \\ https://<host>:<servlet_port>/oauth2/token ``` **Sample request** ``` curl https://localhost:9443/oauth2/token -k \\ -H \"Authorization: Basic Zk9DaTR2Tko1OVBwSHVjQzJDQVlmWXVBRGRNYTphNEZ3SGxxMGlDSUtWczJNUElJRG5lcFpuWU1h\" \\ -d \"grant_type=password&username=admin&password=admin&scope=apim:api_view apim:api_create\" ``` Shown below is a sample response to the above request. ``` { \"access_token\": \"e79bda48-3406-3178-acce-f6e4dbdcbb12\", \"refresh_token\": \"a757795d-e69f-38b8-bd85-9aded677a97c\", \"scope\": \"apim:api_create apim:api_view\", \"token_type\": \"Bearer\", \"expires_in\": 3600 } ``` Now you have a valid access token, which you can use to invoke an API. Navigate through the API descriptions to find the required API, obtain an access token as described above and invoke the API with the authentication header. If you use a different authentication mechanism, this process may change.  # Try out in Postman If you want to try-out the embedded postman collection with \"Run in Postman\" option, please follow the guidelines listed below. * All of the OAuth2 secured endpoints have been configured with an Authorization Bearer header with a parameterized access token. Before invoking any REST API resource make sure you run the `Register DCR Application` and `Generate Access Token` requests to fetch an access token with all required scopes. * Make sure you have an API Manager instance up and running. * Update the `basepath` parameter to match the hostname and port of the APIM instance.  [![Run in Postman](https://run.pstmn.io/button.svg)](https://app.getpostman.com/run-collection/a09044034b5c3c1b01a9) 
 *
 * The version of the OpenAPI document: v4
 * Contact: architecture@wso2.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.wso2.am.integration.clients.publisher.api.v1;

import org.wso2.am.integration.clients.publisher.api.ApiCallback;
import org.wso2.am.integration.clients.publisher.api.ApiClient;
import org.wso2.am.integration.clients.publisher.api.ApiException;
import org.wso2.am.integration.clients.publisher.api.ApiResponse;
import org.wso2.am.integration.clients.publisher.api.Configuration;
import org.wso2.am.integration.clients.publisher.api.Pair;
import org.wso2.am.integration.clients.publisher.api.ProgressRequestBody;
import org.wso2.am.integration.clients.publisher.api.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.wso2.am.integration.clients.publisher.api.v1.dto.APIRevisionDTO;
import org.wso2.am.integration.clients.publisher.api.v1.dto.APIRevisionDeploymentDTO;
import org.wso2.am.integration.clients.publisher.api.v1.dto.APIRevisionDeploymentListDTO;
import org.wso2.am.integration.clients.publisher.api.v1.dto.APIRevisionListDTO;
import org.wso2.am.integration.clients.publisher.api.v1.dto.ErrorDTO;
import org.wso2.am.integration.clients.publisher.api.v1.dto.MCPServerDTO;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class McpServerRevisionsApi {
    private ApiClient localVarApiClient;

    public McpServerRevisionsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public McpServerRevisionsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for createMCPServerRevision
     * @param mcpServerId **MCP Server ID** consisting of the **UUID** of the MCP Server.  (required)
     * @param apIRevisionDTO API object that needs to be added (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created. Successful response with the newly created APIRevision object as the entity in the body.  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. Invalid request or validation error. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The specified resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition Failed. The request has not been performed because one of the preconditions is not met. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createMCPServerRevisionCall(String mcpServerId, APIRevisionDTO apIRevisionDTO, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = apIRevisionDTO;

        // create path and map variables
        String localVarPath = "/mcp-servers/{mcpServerId}/revisions"
            .replaceAll("\\{" + "mcpServerId" + "\\}", localVarApiClient.escapeString(mcpServerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createMCPServerRevisionValidateBeforeCall(String mcpServerId, APIRevisionDTO apIRevisionDTO, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'mcpServerId' is set
        if (mcpServerId == null) {
            throw new ApiException("Missing the required parameter 'mcpServerId' when calling createMCPServerRevision(Async)");
        }
        

        okhttp3.Call localVarCall = createMCPServerRevisionCall(mcpServerId, apIRevisionDTO, _callback);
        return localVarCall;

    }

    /**
     * Create MCP Server Revision
     * Create a new MCP Server revision 
     * @param mcpServerId **MCP Server ID** consisting of the **UUID** of the MCP Server.  (required)
     * @param apIRevisionDTO API object that needs to be added (optional)
     * @return APIRevisionDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created. Successful response with the newly created APIRevision object as the entity in the body.  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. Invalid request or validation error. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The specified resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition Failed. The request has not been performed because one of the preconditions is not met. </td><td>  -  </td></tr>
     </table>
     */
    public APIRevisionDTO createMCPServerRevision(String mcpServerId, APIRevisionDTO apIRevisionDTO) throws ApiException {
        ApiResponse<APIRevisionDTO> localVarResp = createMCPServerRevisionWithHttpInfo(mcpServerId, apIRevisionDTO);
        return localVarResp.getData();
    }

    /**
     * Create MCP Server Revision
     * Create a new MCP Server revision 
     * @param mcpServerId **MCP Server ID** consisting of the **UUID** of the MCP Server.  (required)
     * @param apIRevisionDTO API object that needs to be added (optional)
     * @return ApiResponse&lt;APIRevisionDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created. Successful response with the newly created APIRevision object as the entity in the body.  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. Invalid request or validation error. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The specified resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition Failed. The request has not been performed because one of the preconditions is not met. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<APIRevisionDTO> createMCPServerRevisionWithHttpInfo(String mcpServerId, APIRevisionDTO apIRevisionDTO) throws ApiException {
        okhttp3.Call localVarCall = createMCPServerRevisionValidateBeforeCall(mcpServerId, apIRevisionDTO, null);
        Type localVarReturnType = new TypeToken<APIRevisionDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create MCP Server Revision (asynchronously)
     * Create a new MCP Server revision 
     * @param mcpServerId **MCP Server ID** consisting of the **UUID** of the MCP Server.  (required)
     * @param apIRevisionDTO API object that needs to be added (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created. Successful response with the newly created APIRevision object as the entity in the body.  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. Invalid request or validation error. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The specified resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition Failed. The request has not been performed because one of the preconditions is not met. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createMCPServerRevisionAsync(String mcpServerId, APIRevisionDTO apIRevisionDTO, final ApiCallback<APIRevisionDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = createMCPServerRevisionValidateBeforeCall(mcpServerId, apIRevisionDTO, _callback);
        Type localVarReturnType = new TypeToken<APIRevisionDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteMCPServerRevision
     * @param mcpServerId **MCP Server ID** consisting of the **UUID** of the MCP Server.  (required)
     * @param revisionId Revision ID of an API  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. List of remaining MCP servers revisions are returned.  </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content. Successfully deleted the revision  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The specified resource does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteMCPServerRevisionCall(String mcpServerId, String revisionId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/mcp-servers/{mcpServerId}/revisions/{revisionId}"
            .replaceAll("\\{" + "mcpServerId" + "\\}", localVarApiClient.escapeString(mcpServerId.toString()))
            .replaceAll("\\{" + "revisionId" + "\\}", localVarApiClient.escapeString(revisionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteMCPServerRevisionValidateBeforeCall(String mcpServerId, String revisionId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'mcpServerId' is set
        if (mcpServerId == null) {
            throw new ApiException("Missing the required parameter 'mcpServerId' when calling deleteMCPServerRevision(Async)");
        }
        
        // verify the required parameter 'revisionId' is set
        if (revisionId == null) {
            throw new ApiException("Missing the required parameter 'revisionId' when calling deleteMCPServerRevision(Async)");
        }
        

        okhttp3.Call localVarCall = deleteMCPServerRevisionCall(mcpServerId, revisionId, _callback);
        return localVarCall;

    }

    /**
     * Delete a MCP Server Revision
     * Delete a revision of a MCP server. 
     * @param mcpServerId **MCP Server ID** consisting of the **UUID** of the MCP Server.  (required)
     * @param revisionId Revision ID of an API  (required)
     * @return APIRevisionListDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. List of remaining MCP servers revisions are returned.  </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content. Successfully deleted the revision  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The specified resource does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public APIRevisionListDTO deleteMCPServerRevision(String mcpServerId, String revisionId) throws ApiException {
        ApiResponse<APIRevisionListDTO> localVarResp = deleteMCPServerRevisionWithHttpInfo(mcpServerId, revisionId);
        return localVarResp.getData();
    }

    /**
     * Delete a MCP Server Revision
     * Delete a revision of a MCP server. 
     * @param mcpServerId **MCP Server ID** consisting of the **UUID** of the MCP Server.  (required)
     * @param revisionId Revision ID of an API  (required)
     * @return ApiResponse&lt;APIRevisionListDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. List of remaining MCP servers revisions are returned.  </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content. Successfully deleted the revision  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The specified resource does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<APIRevisionListDTO> deleteMCPServerRevisionWithHttpInfo(String mcpServerId, String revisionId) throws ApiException {
        okhttp3.Call localVarCall = deleteMCPServerRevisionValidateBeforeCall(mcpServerId, revisionId, null);
        Type localVarReturnType = new TypeToken<APIRevisionListDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a MCP Server Revision (asynchronously)
     * Delete a revision of a MCP server. 
     * @param mcpServerId **MCP Server ID** consisting of the **UUID** of the MCP Server.  (required)
     * @param revisionId Revision ID of an API  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. List of remaining MCP servers revisions are returned.  </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content. Successfully deleted the revision  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The specified resource does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteMCPServerRevisionAsync(String mcpServerId, String revisionId, final ApiCallback<APIRevisionListDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteMCPServerRevisionValidateBeforeCall(mcpServerId, revisionId, _callback);
        Type localVarReturnType = new TypeToken<APIRevisionListDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteMCPServerRevisionDeploymentPendingTask
     * @param mcpServerId **MCP Server ID** consisting of the **UUID** of the MCP Server.  (required)
     * @param revisionId Revision ID of an API  (required)
     * @param envName Environment name of an Revision  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Revision deployment pending task removed successfully.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The specified resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition Failed. The request has not been performed because one of the preconditions is not met. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteMCPServerRevisionDeploymentPendingTaskCall(String mcpServerId, String revisionId, String envName, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/mcp-servers/{mcpServerId}/cancel-revision-workflow/{revisionId}/{envName}"
            .replaceAll("\\{" + "mcpServerId" + "\\}", localVarApiClient.escapeString(mcpServerId.toString()))
            .replaceAll("\\{" + "revisionId" + "\\}", localVarApiClient.escapeString(revisionId.toString()))
            .replaceAll("\\{" + "envName" + "\\}", localVarApiClient.escapeString(envName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteMCPServerRevisionDeploymentPendingTaskValidateBeforeCall(String mcpServerId, String revisionId, String envName, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'mcpServerId' is set
        if (mcpServerId == null) {
            throw new ApiException("Missing the required parameter 'mcpServerId' when calling deleteMCPServerRevisionDeploymentPendingTask(Async)");
        }
        
        // verify the required parameter 'revisionId' is set
        if (revisionId == null) {
            throw new ApiException("Missing the required parameter 'revisionId' when calling deleteMCPServerRevisionDeploymentPendingTask(Async)");
        }
        
        // verify the required parameter 'envName' is set
        if (envName == null) {
            throw new ApiException("Missing the required parameter 'envName' when calling deleteMCPServerRevisionDeploymentPendingTask(Async)");
        }
        

        okhttp3.Call localVarCall = deleteMCPServerRevisionDeploymentPendingTaskCall(mcpServerId, revisionId, envName, _callback);
        return localVarCall;

    }

    /**
     * Delete Pending Revision Deployment Workflow Tasks
     * This operation can be used to remove pending revision deployment requests that are in pending state 
     * @param mcpServerId **MCP Server ID** consisting of the **UUID** of the MCP Server.  (required)
     * @param revisionId Revision ID of an API  (required)
     * @param envName Environment name of an Revision  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Revision deployment pending task removed successfully.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The specified resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition Failed. The request has not been performed because one of the preconditions is not met. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteMCPServerRevisionDeploymentPendingTask(String mcpServerId, String revisionId, String envName) throws ApiException {
        deleteMCPServerRevisionDeploymentPendingTaskWithHttpInfo(mcpServerId, revisionId, envName);
    }

    /**
     * Delete Pending Revision Deployment Workflow Tasks
     * This operation can be used to remove pending revision deployment requests that are in pending state 
     * @param mcpServerId **MCP Server ID** consisting of the **UUID** of the MCP Server.  (required)
     * @param revisionId Revision ID of an API  (required)
     * @param envName Environment name of an Revision  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Revision deployment pending task removed successfully.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The specified resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition Failed. The request has not been performed because one of the preconditions is not met. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteMCPServerRevisionDeploymentPendingTaskWithHttpInfo(String mcpServerId, String revisionId, String envName) throws ApiException {
        okhttp3.Call localVarCall = deleteMCPServerRevisionDeploymentPendingTaskValidateBeforeCall(mcpServerId, revisionId, envName, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete Pending Revision Deployment Workflow Tasks (asynchronously)
     * This operation can be used to remove pending revision deployment requests that are in pending state 
     * @param mcpServerId **MCP Server ID** consisting of the **UUID** of the MCP Server.  (required)
     * @param revisionId Revision ID of an API  (required)
     * @param envName Environment name of an Revision  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Revision deployment pending task removed successfully.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The specified resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition Failed. The request has not been performed because one of the preconditions is not met. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteMCPServerRevisionDeploymentPendingTaskAsync(String mcpServerId, String revisionId, String envName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteMCPServerRevisionDeploymentPendingTaskValidateBeforeCall(mcpServerId, revisionId, envName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deployMCPServerRevision
     * @param mcpServerId **MCP Server ID** consisting of the **UUID** of the MCP Server.  (required)
     * @param revisionId Revision ID of an API  (optional)
     * @param apIRevisionDeploymentDTO Deployment object that needs to be added (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Created. Successful response with the newly deployed APIRevisionDeployment List object as the entity in the body.  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. Invalid request or validation error. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The specified resource does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deployMCPServerRevisionCall(String mcpServerId, String revisionId, List<APIRevisionDeploymentDTO> apIRevisionDeploymentDTO, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = apIRevisionDeploymentDTO;

        // create path and map variables
        String localVarPath = "/mcp-servers/{mcpServerId}/deploy-revision"
            .replaceAll("\\{" + "mcpServerId" + "\\}", localVarApiClient.escapeString(mcpServerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (revisionId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("revisionId", revisionId));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deployMCPServerRevisionValidateBeforeCall(String mcpServerId, String revisionId, List<APIRevisionDeploymentDTO> apIRevisionDeploymentDTO, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'mcpServerId' is set
        if (mcpServerId == null) {
            throw new ApiException("Missing the required parameter 'mcpServerId' when calling deployMCPServerRevision(Async)");
        }
        

        okhttp3.Call localVarCall = deployMCPServerRevisionCall(mcpServerId, revisionId, apIRevisionDeploymentDTO, _callback);
        return localVarCall;

    }

    /**
     * Deploy Revision
     * Deploy a revision of a MCP server. 
     * @param mcpServerId **MCP Server ID** consisting of the **UUID** of the MCP Server.  (required)
     * @param revisionId Revision ID of an API  (optional)
     * @param apIRevisionDeploymentDTO Deployment object that needs to be added (optional)
     * @return List&lt;APIRevisionDeploymentDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Created. Successful response with the newly deployed APIRevisionDeployment List object as the entity in the body.  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. Invalid request or validation error. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The specified resource does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public List<APIRevisionDeploymentDTO> deployMCPServerRevision(String mcpServerId, String revisionId, List<APIRevisionDeploymentDTO> apIRevisionDeploymentDTO) throws ApiException {
        ApiResponse<List<APIRevisionDeploymentDTO>> localVarResp = deployMCPServerRevisionWithHttpInfo(mcpServerId, revisionId, apIRevisionDeploymentDTO);
        return localVarResp.getData();
    }

    /**
     * Deploy Revision
     * Deploy a revision of a MCP server. 
     * @param mcpServerId **MCP Server ID** consisting of the **UUID** of the MCP Server.  (required)
     * @param revisionId Revision ID of an API  (optional)
     * @param apIRevisionDeploymentDTO Deployment object that needs to be added (optional)
     * @return ApiResponse&lt;List&lt;APIRevisionDeploymentDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Created. Successful response with the newly deployed APIRevisionDeployment List object as the entity in the body.  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. Invalid request or validation error. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The specified resource does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<APIRevisionDeploymentDTO>> deployMCPServerRevisionWithHttpInfo(String mcpServerId, String revisionId, List<APIRevisionDeploymentDTO> apIRevisionDeploymentDTO) throws ApiException {
        okhttp3.Call localVarCall = deployMCPServerRevisionValidateBeforeCall(mcpServerId, revisionId, apIRevisionDeploymentDTO, null);
        Type localVarReturnType = new TypeToken<List<APIRevisionDeploymentDTO>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Deploy Revision (asynchronously)
     * Deploy a revision of a MCP server. 
     * @param mcpServerId **MCP Server ID** consisting of the **UUID** of the MCP Server.  (required)
     * @param revisionId Revision ID of an API  (optional)
     * @param apIRevisionDeploymentDTO Deployment object that needs to be added (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Created. Successful response with the newly deployed APIRevisionDeployment List object as the entity in the body.  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. Invalid request or validation error. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The specified resource does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deployMCPServerRevisionAsync(String mcpServerId, String revisionId, List<APIRevisionDeploymentDTO> apIRevisionDeploymentDTO, final ApiCallback<List<APIRevisionDeploymentDTO>> _callback) throws ApiException {

        okhttp3.Call localVarCall = deployMCPServerRevisionValidateBeforeCall(mcpServerId, revisionId, apIRevisionDeploymentDTO, _callback);
        Type localVarReturnType = new TypeToken<List<APIRevisionDeploymentDTO>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMCPServerRevision
     * @param mcpServerId **MCP Server ID** consisting of the **UUID** of the MCP Server.  (required)
     * @param revisionId Revision ID of an API  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. A MCP server revision is returned.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The specified resource does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMCPServerRevisionCall(String mcpServerId, String revisionId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/mcp-servers/{mcpServerId}/revisions/{revisionId}"
            .replaceAll("\\{" + "mcpServerId" + "\\}", localVarApiClient.escapeString(mcpServerId.toString()))
            .replaceAll("\\{" + "revisionId" + "\\}", localVarApiClient.escapeString(revisionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMCPServerRevisionValidateBeforeCall(String mcpServerId, String revisionId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'mcpServerId' is set
        if (mcpServerId == null) {
            throw new ApiException("Missing the required parameter 'mcpServerId' when calling getMCPServerRevision(Async)");
        }
        
        // verify the required parameter 'revisionId' is set
        if (revisionId == null) {
            throw new ApiException("Missing the required parameter 'revisionId' when calling getMCPServerRevision(Async)");
        }
        

        okhttp3.Call localVarCall = getMCPServerRevisionCall(mcpServerId, revisionId, _callback);
        return localVarCall;

    }

    /**
     * Retrieve revision of a MCP Server.
     * Retrieve a revision of a MCP server 
     * @param mcpServerId **MCP Server ID** consisting of the **UUID** of the MCP Server.  (required)
     * @param revisionId Revision ID of an API  (required)
     * @return APIRevisionDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. A MCP server revision is returned.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The specified resource does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public APIRevisionDTO getMCPServerRevision(String mcpServerId, String revisionId) throws ApiException {
        ApiResponse<APIRevisionDTO> localVarResp = getMCPServerRevisionWithHttpInfo(mcpServerId, revisionId);
        return localVarResp.getData();
    }

    /**
     * Retrieve revision of a MCP Server.
     * Retrieve a revision of a MCP server 
     * @param mcpServerId **MCP Server ID** consisting of the **UUID** of the MCP Server.  (required)
     * @param revisionId Revision ID of an API  (required)
     * @return ApiResponse&lt;APIRevisionDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. A MCP server revision is returned.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The specified resource does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<APIRevisionDTO> getMCPServerRevisionWithHttpInfo(String mcpServerId, String revisionId) throws ApiException {
        okhttp3.Call localVarCall = getMCPServerRevisionValidateBeforeCall(mcpServerId, revisionId, null);
        Type localVarReturnType = new TypeToken<APIRevisionDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve revision of a MCP Server. (asynchronously)
     * Retrieve a revision of a MCP server 
     * @param mcpServerId **MCP Server ID** consisting of the **UUID** of the MCP Server.  (required)
     * @param revisionId Revision ID of an API  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. A MCP server revision is returned.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The specified resource does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMCPServerRevisionAsync(String mcpServerId, String revisionId, final ApiCallback<APIRevisionDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMCPServerRevisionValidateBeforeCall(mcpServerId, revisionId, _callback);
        Type localVarReturnType = new TypeToken<APIRevisionDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMCPServerRevisionDeployments
     * @param mcpServerId **MCP Server ID** consisting of the **UUID** of the MCP Server.  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. List of deployed revision deployment details are returned.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The specified resource does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMCPServerRevisionDeploymentsCall(String mcpServerId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/mcp-servers/{mcpServerId}/deployments"
            .replaceAll("\\{" + "mcpServerId" + "\\}", localVarApiClient.escapeString(mcpServerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMCPServerRevisionDeploymentsValidateBeforeCall(String mcpServerId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'mcpServerId' is set
        if (mcpServerId == null) {
            throw new ApiException("Missing the required parameter 'mcpServerId' when calling getMCPServerRevisionDeployments(Async)");
        }
        

        okhttp3.Call localVarCall = getMCPServerRevisionDeploymentsCall(mcpServerId, _callback);
        return localVarCall;

    }

    /**
     * List Deployments
     * List available deployed revision deployment details of a MCP Server 
     * @param mcpServerId **MCP Server ID** consisting of the **UUID** of the MCP Server.  (required)
     * @return APIRevisionDeploymentListDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. List of deployed revision deployment details are returned.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The specified resource does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public APIRevisionDeploymentListDTO getMCPServerRevisionDeployments(String mcpServerId) throws ApiException {
        ApiResponse<APIRevisionDeploymentListDTO> localVarResp = getMCPServerRevisionDeploymentsWithHttpInfo(mcpServerId);
        return localVarResp.getData();
    }

    /**
     * List Deployments
     * List available deployed revision deployment details of a MCP Server 
     * @param mcpServerId **MCP Server ID** consisting of the **UUID** of the MCP Server.  (required)
     * @return ApiResponse&lt;APIRevisionDeploymentListDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. List of deployed revision deployment details are returned.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The specified resource does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<APIRevisionDeploymentListDTO> getMCPServerRevisionDeploymentsWithHttpInfo(String mcpServerId) throws ApiException {
        okhttp3.Call localVarCall = getMCPServerRevisionDeploymentsValidateBeforeCall(mcpServerId, null);
        Type localVarReturnType = new TypeToken<APIRevisionDeploymentListDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Deployments (asynchronously)
     * List available deployed revision deployment details of a MCP Server 
     * @param mcpServerId **MCP Server ID** consisting of the **UUID** of the MCP Server.  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. List of deployed revision deployment details are returned.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The specified resource does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMCPServerRevisionDeploymentsAsync(String mcpServerId, final ApiCallback<APIRevisionDeploymentListDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMCPServerRevisionDeploymentsValidateBeforeCall(mcpServerId, _callback);
        Type localVarReturnType = new TypeToken<APIRevisionDeploymentListDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMCPServerRevisions
     * @param mcpServerId **MCP Server ID** consisting of the **UUID** of the MCP Server.  (required)
     * @param query  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. List of MCP server revisions are returned.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The specified resource does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMCPServerRevisionsCall(String mcpServerId, String query, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/mcp-servers/{mcpServerId}/revisions"
            .replaceAll("\\{" + "mcpServerId" + "\\}", localVarApiClient.escapeString(mcpServerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMCPServerRevisionsValidateBeforeCall(String mcpServerId, String query, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'mcpServerId' is set
        if (mcpServerId == null) {
            throw new ApiException("Missing the required parameter 'mcpServerId' when calling getMCPServerRevisions(Async)");
        }
        

        okhttp3.Call localVarCall = getMCPServerRevisionsCall(mcpServerId, query, _callback);
        return localVarCall;

    }

    /**
     * List Revisions
     * List available revisions of a MCP server. 
     * @param mcpServerId **MCP Server ID** consisting of the **UUID** of the MCP Server.  (required)
     * @param query  (optional)
     * @return APIRevisionListDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. List of MCP server revisions are returned.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The specified resource does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public APIRevisionListDTO getMCPServerRevisions(String mcpServerId, String query) throws ApiException {
        ApiResponse<APIRevisionListDTO> localVarResp = getMCPServerRevisionsWithHttpInfo(mcpServerId, query);
        return localVarResp.getData();
    }

    /**
     * List Revisions
     * List available revisions of a MCP server. 
     * @param mcpServerId **MCP Server ID** consisting of the **UUID** of the MCP Server.  (required)
     * @param query  (optional)
     * @return ApiResponse&lt;APIRevisionListDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. List of MCP server revisions are returned.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The specified resource does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<APIRevisionListDTO> getMCPServerRevisionsWithHttpInfo(String mcpServerId, String query) throws ApiException {
        okhttp3.Call localVarCall = getMCPServerRevisionsValidateBeforeCall(mcpServerId, query, null);
        Type localVarReturnType = new TypeToken<APIRevisionListDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Revisions (asynchronously)
     * List available revisions of a MCP server. 
     * @param mcpServerId **MCP Server ID** consisting of the **UUID** of the MCP Server.  (required)
     * @param query  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. List of MCP server revisions are returned.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The specified resource does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMCPServerRevisionsAsync(String mcpServerId, String query, final ApiCallback<APIRevisionListDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMCPServerRevisionsValidateBeforeCall(mcpServerId, query, _callback);
        Type localVarReturnType = new TypeToken<APIRevisionListDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for restoreMCPServerRevision
     * @param mcpServerId **MCP Server ID** consisting of the **UUID** of the MCP Server.  (required)
     * @param revisionId Revision ID of an API  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Restored. Successful response with the newly restored API object as the entity in the body.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The specified resource does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call restoreMCPServerRevisionCall(String mcpServerId, String revisionId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/mcp-servers/{mcpServerId}/restore-revision"
            .replaceAll("\\{" + "mcpServerId" + "\\}", localVarApiClient.escapeString(mcpServerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (revisionId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("revisionId", revisionId));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call restoreMCPServerRevisionValidateBeforeCall(String mcpServerId, String revisionId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'mcpServerId' is set
        if (mcpServerId == null) {
            throw new ApiException("Missing the required parameter 'mcpServerId' when calling restoreMCPServerRevision(Async)");
        }
        

        okhttp3.Call localVarCall = restoreMCPServerRevisionCall(mcpServerId, revisionId, _callback);
        return localVarCall;

    }

    /**
     * Restore a MCP Server Revision
     * Restore a revision to the current MCP server 
     * @param mcpServerId **MCP Server ID** consisting of the **UUID** of the MCP Server.  (required)
     * @param revisionId Revision ID of an API  (optional)
     * @return MCPServerDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Restored. Successful response with the newly restored API object as the entity in the body.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The specified resource does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public MCPServerDTO restoreMCPServerRevision(String mcpServerId, String revisionId) throws ApiException {
        ApiResponse<MCPServerDTO> localVarResp = restoreMCPServerRevisionWithHttpInfo(mcpServerId, revisionId);
        return localVarResp.getData();
    }

    /**
     * Restore a MCP Server Revision
     * Restore a revision to the current MCP server 
     * @param mcpServerId **MCP Server ID** consisting of the **UUID** of the MCP Server.  (required)
     * @param revisionId Revision ID of an API  (optional)
     * @return ApiResponse&lt;MCPServerDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Restored. Successful response with the newly restored API object as the entity in the body.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The specified resource does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MCPServerDTO> restoreMCPServerRevisionWithHttpInfo(String mcpServerId, String revisionId) throws ApiException {
        okhttp3.Call localVarCall = restoreMCPServerRevisionValidateBeforeCall(mcpServerId, revisionId, null);
        Type localVarReturnType = new TypeToken<MCPServerDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Restore a MCP Server Revision (asynchronously)
     * Restore a revision to the current MCP server 
     * @param mcpServerId **MCP Server ID** consisting of the **UUID** of the MCP Server.  (required)
     * @param revisionId Revision ID of an API  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Restored. Successful response with the newly restored API object as the entity in the body.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The specified resource does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call restoreMCPServerRevisionAsync(String mcpServerId, String revisionId, final ApiCallback<MCPServerDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = restoreMCPServerRevisionValidateBeforeCall(mcpServerId, revisionId, _callback);
        Type localVarReturnType = new TypeToken<MCPServerDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for undeployMCPServerRevision
     * @param mcpServerId **MCP Server ID** consisting of the **UUID** of the MCP Server.  (required)
     * @param revisionId Revision ID of an API  (optional)
     * @param revisionNumber Revision Number of an API  (optional)
     * @param allEnvironments  (optional, default to false)
     * @param apIRevisionDeploymentDTO Deployment object that needs to be added (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK.  </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created. Successful response with the newly undeployed APIRevisionDeploymentList object as the entity in the body.  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. Invalid request or validation error. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The specified resource does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call undeployMCPServerRevisionCall(String mcpServerId, String revisionId, String revisionNumber, Boolean allEnvironments, List<APIRevisionDeploymentDTO> apIRevisionDeploymentDTO, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = apIRevisionDeploymentDTO;

        // create path and map variables
        String localVarPath = "/mcp-servers/{mcpServerId}/undeploy-revision"
            .replaceAll("\\{" + "mcpServerId" + "\\}", localVarApiClient.escapeString(mcpServerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (revisionId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("revisionId", revisionId));
        }

        if (revisionNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("revisionNumber", revisionNumber));
        }

        if (allEnvironments != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("allEnvironments", allEnvironments));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call undeployMCPServerRevisionValidateBeforeCall(String mcpServerId, String revisionId, String revisionNumber, Boolean allEnvironments, List<APIRevisionDeploymentDTO> apIRevisionDeploymentDTO, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'mcpServerId' is set
        if (mcpServerId == null) {
            throw new ApiException("Missing the required parameter 'mcpServerId' when calling undeployMCPServerRevision(Async)");
        }
        

        okhttp3.Call localVarCall = undeployMCPServerRevisionCall(mcpServerId, revisionId, revisionNumber, allEnvironments, apIRevisionDeploymentDTO, _callback);
        return localVarCall;

    }

    /**
     * UnDeploy Revision of a MCP Server
     * UnDeploy a revision of a MCP server. 
     * @param mcpServerId **MCP Server ID** consisting of the **UUID** of the MCP Server.  (required)
     * @param revisionId Revision ID of an API  (optional)
     * @param revisionNumber Revision Number of an API  (optional)
     * @param allEnvironments  (optional, default to false)
     * @param apIRevisionDeploymentDTO Deployment object that needs to be added (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK.  </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created. Successful response with the newly undeployed APIRevisionDeploymentList object as the entity in the body.  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. Invalid request or validation error. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The specified resource does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public void undeployMCPServerRevision(String mcpServerId, String revisionId, String revisionNumber, Boolean allEnvironments, List<APIRevisionDeploymentDTO> apIRevisionDeploymentDTO) throws ApiException {
        undeployMCPServerRevisionWithHttpInfo(mcpServerId, revisionId, revisionNumber, allEnvironments, apIRevisionDeploymentDTO);
    }

    /**
     * UnDeploy Revision of a MCP Server
     * UnDeploy a revision of a MCP server. 
     * @param mcpServerId **MCP Server ID** consisting of the **UUID** of the MCP Server.  (required)
     * @param revisionId Revision ID of an API  (optional)
     * @param revisionNumber Revision Number of an API  (optional)
     * @param allEnvironments  (optional, default to false)
     * @param apIRevisionDeploymentDTO Deployment object that needs to be added (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK.  </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created. Successful response with the newly undeployed APIRevisionDeploymentList object as the entity in the body.  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. Invalid request or validation error. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The specified resource does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> undeployMCPServerRevisionWithHttpInfo(String mcpServerId, String revisionId, String revisionNumber, Boolean allEnvironments, List<APIRevisionDeploymentDTO> apIRevisionDeploymentDTO) throws ApiException {
        okhttp3.Call localVarCall = undeployMCPServerRevisionValidateBeforeCall(mcpServerId, revisionId, revisionNumber, allEnvironments, apIRevisionDeploymentDTO, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * UnDeploy Revision of a MCP Server (asynchronously)
     * UnDeploy a revision of a MCP server. 
     * @param mcpServerId **MCP Server ID** consisting of the **UUID** of the MCP Server.  (required)
     * @param revisionId Revision ID of an API  (optional)
     * @param revisionNumber Revision Number of an API  (optional)
     * @param allEnvironments  (optional, default to false)
     * @param apIRevisionDeploymentDTO Deployment object that needs to be added (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK.  </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created. Successful response with the newly undeployed APIRevisionDeploymentList object as the entity in the body.  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. Invalid request or validation error. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The specified resource does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call undeployMCPServerRevisionAsync(String mcpServerId, String revisionId, String revisionNumber, Boolean allEnvironments, List<APIRevisionDeploymentDTO> apIRevisionDeploymentDTO, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = undeployMCPServerRevisionValidateBeforeCall(mcpServerId, revisionId, revisionNumber, allEnvironments, apIRevisionDeploymentDTO, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateMCPServerDeployment
     * @param mcpServerId **MCP Server ID** consisting of the **UUID** of the MCP Server.  (required)
     * @param deploymentId Base64 URL encoded value of the name of an environment  (required)
     * @param apIRevisionDeploymentDTO Deployment object that needs to be updated (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Created. Successful response with the newly updated APIRevisionDeployment List object as the entity in the body.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The specified resource does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateMCPServerDeploymentCall(String mcpServerId, String deploymentId, APIRevisionDeploymentDTO apIRevisionDeploymentDTO, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = apIRevisionDeploymentDTO;

        // create path and map variables
        String localVarPath = "/mcp-servers/{mcpServerId}/deployments/{deploymentId}"
            .replaceAll("\\{" + "mcpServerId" + "\\}", localVarApiClient.escapeString(mcpServerId.toString()))
            .replaceAll("\\{" + "deploymentId" + "\\}", localVarApiClient.escapeString(deploymentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateMCPServerDeploymentValidateBeforeCall(String mcpServerId, String deploymentId, APIRevisionDeploymentDTO apIRevisionDeploymentDTO, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'mcpServerId' is set
        if (mcpServerId == null) {
            throw new ApiException("Missing the required parameter 'mcpServerId' when calling updateMCPServerDeployment(Async)");
        }
        
        // verify the required parameter 'deploymentId' is set
        if (deploymentId == null) {
            throw new ApiException("Missing the required parameter 'deploymentId' when calling updateMCPServerDeployment(Async)");
        }
        

        okhttp3.Call localVarCall = updateMCPServerDeploymentCall(mcpServerId, deploymentId, apIRevisionDeploymentDTO, _callback);
        return localVarCall;

    }

    /**
     * Update Deployment
     * Update deployment devportal visibility 
     * @param mcpServerId **MCP Server ID** consisting of the **UUID** of the MCP Server.  (required)
     * @param deploymentId Base64 URL encoded value of the name of an environment  (required)
     * @param apIRevisionDeploymentDTO Deployment object that needs to be updated (optional)
     * @return APIRevisionDeploymentDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Created. Successful response with the newly updated APIRevisionDeployment List object as the entity in the body.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The specified resource does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public APIRevisionDeploymentDTO updateMCPServerDeployment(String mcpServerId, String deploymentId, APIRevisionDeploymentDTO apIRevisionDeploymentDTO) throws ApiException {
        ApiResponse<APIRevisionDeploymentDTO> localVarResp = updateMCPServerDeploymentWithHttpInfo(mcpServerId, deploymentId, apIRevisionDeploymentDTO);
        return localVarResp.getData();
    }

    /**
     * Update Deployment
     * Update deployment devportal visibility 
     * @param mcpServerId **MCP Server ID** consisting of the **UUID** of the MCP Server.  (required)
     * @param deploymentId Base64 URL encoded value of the name of an environment  (required)
     * @param apIRevisionDeploymentDTO Deployment object that needs to be updated (optional)
     * @return ApiResponse&lt;APIRevisionDeploymentDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Created. Successful response with the newly updated APIRevisionDeployment List object as the entity in the body.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The specified resource does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<APIRevisionDeploymentDTO> updateMCPServerDeploymentWithHttpInfo(String mcpServerId, String deploymentId, APIRevisionDeploymentDTO apIRevisionDeploymentDTO) throws ApiException {
        okhttp3.Call localVarCall = updateMCPServerDeploymentValidateBeforeCall(mcpServerId, deploymentId, apIRevisionDeploymentDTO, null);
        Type localVarReturnType = new TypeToken<APIRevisionDeploymentDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Deployment (asynchronously)
     * Update deployment devportal visibility 
     * @param mcpServerId **MCP Server ID** consisting of the **UUID** of the MCP Server.  (required)
     * @param deploymentId Base64 URL encoded value of the name of an environment  (required)
     * @param apIRevisionDeploymentDTO Deployment object that needs to be updated (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Created. Successful response with the newly updated APIRevisionDeployment List object as the entity in the body.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The specified resource does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateMCPServerDeploymentAsync(String mcpServerId, String deploymentId, APIRevisionDeploymentDTO apIRevisionDeploymentDTO, final ApiCallback<APIRevisionDeploymentDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateMCPServerDeploymentValidateBeforeCall(mcpServerId, deploymentId, apIRevisionDeploymentDTO, _callback);
        Type localVarReturnType = new TypeToken<APIRevisionDeploymentDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
